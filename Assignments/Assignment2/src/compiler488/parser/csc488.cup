// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;		// Must always import this.

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components. 
 * Modifications to the default generated parser
 */
parser code {:

	String lastError;
	
    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
	{
	String st =  "Error";
   
        if (info instanceof java_cup.runtime.Symbol)
	    {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

	    /* s.left is supposed to hold the line number of the error.
	     * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
	     */
   
            if (s.left >= 0)				// Check line number.
		{
                st += " in line " + (s.left + 1);
                if (s.right >= 0)			// Check column number.
                    st += ", column " + (s.right + 1);
		}
            else
               st += " at end of input " ;
           }
	    st += ": " + message;
        System.err.println (st);
        lastError = st;
	}
   
    /** Override the report_fatal_error method to use the report_error method. */
    public void report_fatal_error (String message, Object info) 
	{
        report_error (message, info);
	}
   
:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2009/2010 

// Terminals returned by the scanner with no value attached.  
terminal	AND,	OR,	NOT,	TRUE,	FALSE	;
terminal 	BOOLEAN,INTEGER,FUNCTION,PROCEDURE	;
terminal	BEGIN,	DO,	ELSE,	END,	EXIT	;
terminal	IF,	RETURN,	LOOP,	PUT,	GET	;
terminal	THEN,	WHILE,	SKIP,	YIELDS, WHEN	;

// Special-character terminals, no value attached
terminal	L_PAREN	,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY	;
terminal	EQUAL,	GREATER,LESS,	COMMA,  DOT	;
terminal	PLUS,	MINUS,	TIMES,  DIVIDE	;

// Terminals returned by the scanner with a value.
terminal String  IDENT	;
terminal Integer INTCONST	;
terminal String  TEXTCONST	;

// Non-terminals that have no value.
// nonterminal xxx

nonterminal argument, arguments, arrayname, bound, expr0, expr1, expr2, expr3, expr4, expr5, expr6, expr_, expression, functionname, generalBound, input, inputs, output, outputs, parameter, parametername, parameters, procedurename, program, scope, statement, statements, type, variable, variabledef, variablename, variablenames;


/**********************************************************

The nonterminals from your grammar go here

***********************************************************/

// Non-terminals that have a value.
// nonterminal type  nameList ;

// PLEASE NOTE: your grammar can not use the 'precedence'
// feature of java-cup. The lines below should remain
// commented.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;		// Higher precedence.

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

// program  ::=   ;		// the main program

/*****************************************************************************

  YOUR CAREFULLY CRAFTED GRAMMAR FOR THE CSC488S SOURCE LANGUAGE

    GOES HERE

****************************************************************************/

program
 ::= scope
   ;

scope
 ::= BEGIN statements END
   | BEGIN END
   ;

type
 ::= INTEGER
   | BOOLEAN
   ;

generalBound
 ::= INTCONST
   | MINUS INTCONST
   ;

bound
 ::= INTCONST
   | generalBound DOT DOT generalBound
   ;

statements
 ::= statement
   | statements statement
   ;

statement
 ::= variable LESS EQUAL expression
   | IF expression THEN statements END
   | IF expression THEN statements ELSE statements END
   | WHILE expression DO statements END
   | LOOP statements END
   | EXIT
   | EXIT WHEN expression
   | RETURN L_PAREN expression R_PAREN
   | RETURN
   | PUT outputs
   | GET inputs
   | procedurename
   | procedurename L_PAREN arguments R_PAREN
   | scope
   | type variablenames
   | type FUNCTION functionname scope
   | type FUNCTION functionname L_PAREN parameters R_PAREN scope
   | PROCEDURE procedurename scope
   | PROCEDURE procedurename L_PAREN parameters R_PAREN scope
   ;

variablenames
 ::= variabledef
   | variablenames COMMA variabledef
   ;

variabledef
 ::= variablename
   | variablename L_SQUARE bound R_SQUARE
   | variablename L_SQUARE bound COMMA bound R_SQUARE
   ;

outputs
 ::= output
   | outputs COMMA output
   ;

output
 ::= expression
   | TEXTCONST
   | SKIP
   ;

inputs
 ::= input
   | inputs COMMA input
   ;

input
 ::= variable
   ;

arguments
 ::= argument
   | arguments COMMA argument
   ;

argument
 ::= expression
   ;

parameters
 ::= parameter
   | parameters COMMA parameter
   ;

parameter
 ::= type parametername
   ;

variable
 ::= variablename
   | arrayname L_SQUARE expression R_SQUARE
   | arrayname L_SQUARE expression COMMA expression R_SQUARE
   ;

expression
 ::= expr6
   ;

expr6
 ::= expr5
   | expr6 OR expr5
   ;

expr5
 ::= expr4
   | expr5 AND expr4
   ;

expr4
 ::= expr3
   | NOT expr4
   ;

expr3
 ::= expr2
   | expr2 EQUAL expr2
   | expr2 NOT EQUAL expr2
   | expr2 LESS expr2
   | expr2 LESS EQUAL expr2
   | expr2 GREATER expr2
   | expr2 GREATER EQUAL expr2
   ;

expr2
 ::= expr1
   | expr2 PLUS expr1
   | expr2 MINUS expr1
   ;

expr1
 ::= expr0
   | expr1 TIMES expr0
   | expr1 DIVIDE expr0
   ;

expr0
 ::= expr_
   | MINUS expr0
   ;

expr_
 ::= INTCONST
   | TRUE
   | FALSE
   | L_PAREN expression R_PAREN
   | L_CURLEY statements YIELDS expression R_CURLEY
   | functionname L_PAREN arguments R_PAREN
   | IDENT
   | arrayname L_SQUARE expression R_SQUARE
   | arrayname L_SQUARE expression COMMA expression R_SQUARE
   ;

variablename
 ::= IDENT
   ;

arrayname
 ::= IDENT
   ;

functionname
 ::= IDENT
   ;

parametername
 ::= IDENT
   ;

procedurename
 ::= IDENT
   ;

