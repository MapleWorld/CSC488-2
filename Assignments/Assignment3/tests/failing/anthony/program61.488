begin
	exit when (!(64))
	loop
		exit
		put skip, skip
		put false, "world", false
		exit when ({
			put -(-(false)), ":D"
		yields
			-(true)
		})
	end
	if 74 then
		if {
			exit when (!(71))
		yields
			true
		} then
			exit when (18)
			exit
			exit
			exit when (8)
		end
		if ({
			exit
		yields
			-(false)
		}) * ({
			exit when (28)
		yields
			43
		}) then
			integer var1[30], var2[30, 48]
			var2 <= (50) > (((!(var2)) != (true)) | (var1))
			exit when (var2[true])
		end
		var1 <= {
			exit
		yields
			(var1[true, true]) / (true)
		}
		if {
			return (true)
		yields
			false
		} then
			put "world"
		end
	else
		exit
		integer function func1
		begin
			boolean var1, var2, var3[95, 31]
			exit
			integer var1[95, 67]
			exit when (81)
			exit
		end

		while func1 do
			exit when (34)
			exit
			var1 <= (func1) != ((false) != (var2[-(true), false]))
			boolean var1
			var1[-(true), var1[false]] <= func1
		end
		if func1 then
			get var1[false, true]
			put "world"
			put ":D"
			get var1[(!((7) / (true))) <= (var1), true], var1[true, (func1) >= ((func1) <= (var1[true]))], var1[true, true]
		end
	end
	exit
end

