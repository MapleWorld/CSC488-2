begin
	while {
		if {
			exit when (!(33))
		yields
			false
		} then
			exit
			exit
			exit when (!(!(!(54))))
		else
			return
			boolean var1[7]
			return
		end
	yields
		true
	} do
		put "world"
		begin
			exit when (48)
			put "!?", (100) = ((62) >= ((60) < (true))), "!?"
			boolean var1[-68..-73]
		end
		loop
			exit
			put "!?", "hello", true
			put "world", false
		end
		put skip
	end
	exit when ({
		begin
			exit
			exit when ((65) / (false))
		end
	yields
		(true) | ({
			put "hello", skip
		yields
			false
		})
	})
	boolean function func1(integer arg1, integer arg2)
	begin
		exit
		if arg2[false] then
			exit when (!(8))
			integer var1[1..-70, 36..-63], var2[64], var3[17, 66..4]
			put skip, ":D"
			arg2[false, true] <= func1(func1(-((false) | (100)), false), true)
			boolean var1[65]
		end
		procedure proc1(boolean arg1)
		begin
			return (arg1[-((var1[true]) & (12))])
			return (true)
		end

		if 61 then
			proc1(arg2[true, false])
			get var1[false, false], var1, var1[var1[-(true)]]
			exit
			exit when ((70) + (var1[func1(true, false), true]))
		else
			exit when (23)
			put func1((false) | (25), func1(false, var1[true]))
			var1[func1(func1(var1[false], true), var1[var1]), func1(func1(true, false), func1(false, (var1) & (12)))] <= 86
			proc1(!(20))
			put "!?"
		end
		arg2[true] <= -(((false) & (!(39))) | (77))
	end

end

